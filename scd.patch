diff --git a/scd30_i2c_example_usage.c b/scd30_i2c_example_usage.c
index acbcc2b..16caeb8 100644
--- a/scd30_i2c_example_usage.c
+++ b/scd30_i2c_example_usage.c
@@ -42,10 +42,8 @@
 
 #define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec
 
-int main(void) {
+int one_shot(void) {
     int16_t error = NO_ERROR;
-    sensirion_i2c_hal_init();
-    init_driver(SCD30_I2C_ADDR_61);
 
     // make sure the sensor is in a defined state (soft reset does not stop
     // periodic measurement)
@@ -53,14 +51,6 @@ int main(void) {
     scd30_soft_reset();
     sensirion_hal_sleep_us(2000000);
 
-    uint8_t major = 0;
-    uint8_t minor = 0;
-    error = scd30_read_firmware_version(&major, &minor);
-    if (error != NO_ERROR) {
-        printf("error executing read_firmware_version(): %i\n", error);
-        return error;
-    }
-    printf("firmware version major: %u minor: %u\n", major, minor);
     error = scd30_start_periodic_measurement(0);
     if (error != NO_ERROR) {
         printf("error executing start_periodic_measurement(): %i\n", error);
@@ -71,8 +61,8 @@ int main(void) {
     float temperature = 0.0;
     float humidity = 0.0;
     uint16_t repetition = 0;
-    for (repetition = 0; repetition < 30; repetition++) {
-        sensirion_hal_sleep_us(1500000);
+    for (repetition = 0; repetition < 30000; repetition++) {
+        sensirion_hal_sleep_us(15000000);
         error = scd30_blocking_read_measurement_data(&co2_concentration,
                                                      &temperature, &humidity);
         if (error != NO_ERROR) {
@@ -83,6 +73,7 @@ int main(void) {
         printf("co2_concentration: %.2f ", co2_concentration);
         printf("temperature: %.2f ", temperature);
         printf("humidity: %.2f\n", humidity);
+	fflush(stdout);
     }
 
     error = scd30_stop_periodic_measurement();
@@ -93,3 +84,24 @@ int main(void) {
 
     return NO_ERROR;
 }
+
+
+int main(void) {
+    sensirion_i2c_hal_init();
+    init_driver(SCD30_I2C_ADDR_61);
+
+    /*uint8_t major = 0;
+    uint8_t minor = 0;
+    int16_t error = NO_ERROR;
+    error = scd30_read_firmware_version(&major, &minor);
+    if (error != NO_ERROR) {
+        printf("error executing read_firmware_version(): %i\n", error);
+        return error;
+    }
+    printf("firmware version major: %u minor: %u\n", major, minor);*/
+
+    while(1) {
+        one_shot();
+        printf("scd30: new loop\n");
+    }
+}
